class Node

	__init__
		Создает либо пустую особь, коэффициенты для которой будут заполняться после; либо особь 0 поколения. Во втором случае заполнение происходит прямо в конструкторе. Коэффициенты храняться в двоичном коде Грея.
		
	getCoef
		Возвращает лист коэффициентов, приведенных к вещественному виду
		
	calcRating
		q - хранит коэффициенты особи в вещественном виде (-1.0, 1.0)
		Далее берем Быстрое преобразование Фурье от коэффициентов q, так, чтобы количество частот было в 2 раза большим, чем количество частот в исходной АЧХ. Кладем из в лист w.
		В лист e кладем амплитуды (модуль комплексных коэффициентов из массива w)
		Далее методом трапеций считаем разницу между полученной АЧХ и исходной. Полученную площадь объявляем рейтингом особи.
		
	mutate
		Случайно выбираем количество коэжффициентов k, которые будут мутировать. Далее k раз выбираем случайно коэффициент q и изменяем 1 случайный бит в данном коэффициенте.
		
	getBinaryMass
		Переводит переданную строку с двоичным числом в коде Грея к стандартному двоичному виду. Это реализуется путем взятия побитового xor от всех строк с побитовым сдвигом (https://otvet.mail.ru/question/37344632).
		
	binToDec
		Переводит двоичный код в десятичный. Если число отрицательное, то перевод производится из дополнительного кода в десятичный.
		
	decToFloat
		Переводит десятичное число в вещественное. Вещественное число находится в интервале [-1.0; 1.0]

	printMe
		Вывод информации особи на экран
		(Отладочная функция)
	
class NodeManager
	__init__
		Создается начальная популяция. Для каждой созданной особи сразу же считается ее рейтинг
	
	selection
		Удаляет лишних особей.
		Сначала особи сортируются по увеличению рейтинга (чем меньше рейтинг, тем особь приспособленней).
		Далее вормируется массив с особями, которых нужно оставить. Самая приспособленная особь сразу же добавляется. Далее добавляются все новые особи. Старые не добавляются совсем.
		Если количество особей на 1 больше чем должно быть (возможно если старая особь была наиболее приспособленной), то последняя особь (наименее приспособленная) удаляется из списка. Запоминаем новый список.
		
	crossover
		Сортирует всех особей по рейтингу. Родителями считаются две соседние особи (0,1; 2,3; ... ; n-2, n-1). Так как range сначала генерирует послежовательность чисел для цикла, то добавленные особи уже не будут участвовать в процессе
	
	mutate
		Запускает мутацию для каждой особи, кроме наиболее приспособленной
	
	crossNode
		Сначала создается массив, содержащий все коэффициенты родителей, это oldGenes1. Далее создается точная копия данного массива и он переворачивается (reverse), это oldGenes2.
		Далее будет создаваться новый массив генов.
		Для кажлого коэффициента выбирается случаное k - граница разрыва текущего гена (коэффициента). В новый ген берутся биты до k из oldGenes1 и биты c k и далее из oldGenes2. 
		Созданные коэффициенты случайно разбиваются на 2 части (любой особи достанется хотя бы 1 ген (коэффициент)). Левая часть отдается первому потомку, правая часть - второму.
		Особи добавляются в конец списка особей
	
	sortNodes
		Сортирует особей по увеличению их рейтинга
		
	run
		Создает новое поколение особей
		Вызывает мутирование особей
		Удаляет лишних особей
	
	printLeader
		После выполнения алгоритма выводит лучшую особь
	
	printMe
		Выводит всех особей на экран.
		(отладочная функция)
		
Формат файла input.txt:
	//Далее будет описание каждой строки файла в формате <n> <описание>

	1 АЧХ в виде массива амплитуд. (индекс массива - частота, значение ячейки массива - амплитуда). Все значения записаны в одну строку через пробел. После последнего числа пробела нет (это важно)
	2 Количество особей
	3 Количество поколений
	4 Максимальное количество коэффициентов у особи
	5 Эпсилон - минимальная приемлимая разница (если рейтинг лучшей особи станет меньше либо равен этому числу, то алгоритм досрочно закончится)

Описание файлов в папке project
	aCreating.py
		Пример создания АЧХ.
	debuggingVersion.py
		Версия с большим количеством отладочной инфы (комментарии и print коанды для отладки)
	releaseVersion.py
		Рабочая версия без лишних строк кода
	test.m
		Программа для матлаба. Проверяет Преобразование коэффициентов в АЧХ
	test.png
		График АЧХ, создаваемой aCreating.py
	spirit.png
		График исходной АЧХ и полученной АЧХ фильтра
	rawData.txt
		Лог изменений популяции
	input.txt
		Файл с исходными данными
	readme.txt
		Файл с важной информацией